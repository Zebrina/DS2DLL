[options_game]
{
	centered = background;
	interface = true;
	skrit = [[
		owner = GUInterface;
		#include "k_inc_ui_utils"

        SyncAlwaysActive$
        {
            string msg$;
            if (AppModule.AlwaysActive) {
                msg$ = "On";
            } else {
                msg$ = "Off";
            }
            SetUITextText$("options_game", "button_always_active_text", msg$);
        }

		ToggleAlwaysActive$
		{
            AppModule.ToggleAlwaysActive();
            SyncAlwaysActive$();
		}

		// This function synchronizes the text and state of the automation buttons (on/off/disabled)
		// Based on the game state and the state of the automation setting (Gobit on the main hero)

		// NOTE: These options are N/A (disabled) if we're not in the game state.
		// This is clearly presented to the player in the rollover and makes sense
		// because you can't set a party-specfic option without a party selected.
		SyncAutomation$
		{
			// Check to make sure we're in the game state
			if ( IsInGame( WorldState.GetCurrentState() ) )
			{
				// Sync the attack automation option
				SetUIButtonState$( "options_game", "button_attack_automation", true, true);
				bool automation$ = GoBits.GetGoBitBool( Server.ScreenHero.goid, "attr:autoattack", false );

				string msg$;
				if(automation$)
				{
					msg$ = Report.Translate(contentdb.GetTemplateString( "gs_option_on:global_string:screen_text", "" ));
				}
				else
				{
					msg$ = Report.Translate(contentdb.GetTemplateString( "gs_option_off:global_string:screen_text", "" ));
				}

				SetUITextText$( "options_game", "button_attack_automation_text", msg$ );

				// Sync the defend automation option
				SetUIButtonState$( "options_game", "button_defend_automation", true, true);
				automation$ = GoBits.GetGoBitBool( Server.ScreenHero.goid, "attr:autodefend", false );

				if(automation$)
				{
					msg$ = Report.Translate(contentdb.GetTemplateString( "gs_option_on:global_string:screen_text", "" ));
				}
				else
				{
					msg$ = Report.Translate(contentdb.GetTemplateString( "gs_option_off:global_string:screen_text", "" ));
				}

				SetUITextText$( "options_game", "button_defend_automation_text", msg$ );
			}
			else
			{
				// We're not in the game state, disable the automation buttons and make them say N/A
				string msg$ = Report.Translate(contentdb.GetTemplateString( "gs_option_na:global_string:screen_text", "" ));

				// Attack automation button
				SetUIButtonState$( "options_game", "button_attack_automation", false, false);
				SetUITextText$( "options_game", "button_attack_automation_text", msg$ );

				// Defend automation button
				SetUIButtonState$( "options_game", "button_defend_automation", false, false);
				SetUITextText$( "options_game", "button_defend_automation_text", msg$ );
			}
		}

		// This function toggles the state of the attack automation option
		ToggleAttackAutomation$
		{
			// Make sure we're in the game state
			if ( IsInGame( WorldState.GetCurrentState() ) )
			{
				// Get the state of the attack-automation option
				bool automation$ = GoBits.GetGoBitBool( Server.ScreenHero.goid, "attr:autoattack", false );

				if(!automation$)
				{
					// Warn the user what this will do each time they turn it on (via popup box)
					string msg$ = Report.Translate(contentdb.GetTemplateString( "gs_auto_attack:global_string:screen_text", "" ));
					UIShell.ActivateInterface( "ui:interfaces:backend:backend_dialog3", true );
					UIShell.ShowInterfaceOnTop( "backend_dialog3" );
					UIUtility.SetTextBoxText( "dialog_text_box", "backend_dialog3", msg$ );
				}

				// Set this immediately on the client so it will show up right away in the sync function
				GoBits.SetGoBitBool( Server.ScreenHero.goid, "default", "attr:autoattack", !automation$, GOBIT_PERSIST_WITH_CHARACTER);
				// And also request it to go to the server so it actually works
				GoBits.RSSetGoBitBool( Server.ScreenHero.goid, "default", "attr:autoattack", !automation$, GOBIT_PERSIST_WITH_CHARACTER);

				SyncAutomation$();
			}
		}

		// This function toggles the state of the attack automation option
		ToggleDefendAutomation$
		{
			// Make sure we're in the game state
			if ( IsInGame( WorldState.GetCurrentState() ) )
			{
				// Get the state of the attack-automation option
				bool automation$ = GoBits.GetGoBitBool( Server.ScreenHero.goid, "attr:autodefend", false );

				if(!automation$)
				{
					// Warn the user what this will do each time they turn it on (via popup box)
					string msg$ = Report.Translate(contentdb.GetTemplateString( "gs_auto_defend:global_string:screen_text", "" ));
					UIShell.ActivateInterface( "ui:interfaces:backend:backend_dialog3", true );
					UIShell.ShowInterfaceOnTop( "backend_dialog3" );
					UIUtility.SetTextBoxText( "dialog_text_box", "backend_dialog3", msg$ );
				}

				// Set this immediately on the client so it will show up right away in the sync function
				GoBits.SetGoBitBool( Server.ScreenHero.goid, "default", "attr:autodefend", !automation$, GOBIT_PERSIST_WITH_CHARACTER);
				// And also request it to go to the server so it actually works
				GoBits.RSSetGoBitBool( Server.ScreenHero.goid, "default", "attr:autodefend", !automation$, GOBIT_PERSIST_WITH_CHARACTER);

				SyncAutomation$();
			}
		}

		// This function resets the state of the attack and defend automation option (called by the ResetDefaults button)
		ResetAutomation$
		{
			// Make sure we're in the game state
			if ( IsInGame( WorldState.GetCurrentState() ) )
			{
				// Set this immediately on the client so it will show up right away in the sync function
				GoBits.SetGoBitBool( Server.ScreenHero.goid, "default", "attr:autoattack", false, GOBIT_PERSIST_WITH_CHARACTER);
				// And also request it to go to the server so it actually works
				GoBits.RSSetGoBitBool( Server.ScreenHero.goid, "default", "attr:autoattack", false, GOBIT_PERSIST_WITH_CHARACTER);

				// Set this immediately on the client so it will show up right away in the sync function
				GoBits.SetGoBitBool( Server.ScreenHero.goid, "default", "attr:autodefend", false, GOBIT_PERSIST_WITH_CHARACTER);
				// And also request it to go to the server so it actually works
				GoBits.RSSetGoBitBool( Server.ScreenHero.goid, "default", "attr:autodefend", false, GOBIT_PERSIST_WITH_CHARACTER);

				SyncAutomation$();
			}
		}

		trigger OnInterfaceHandleMessage$( MSG_ONSHOW )
		{
            SyncAlwaysActive$();
			SyncAutomation$();
		}
	]];
	[t:dialog_box,n:background]
	{
		rect = 150,89,650,511;
	}

	[t:button,n:button_back]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_back;
	  b help_tool_tip = true;
		rect = 221,414,361,438;
		[t:text,n:button_back_text]
		{
		  i draw_order = 68;
		  i font_size = 12;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_back;
			justify = center;
		  i parent_offset = 16;
			rect = 284,421,371,439;
			text = "Back";
		}
		[messages]
		{
			onbuttonpress = notify(options_game_back) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}

	[t:button,n:button_attack_automation]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 421,349,571,373;
		[t:text,n:button_attack_automation_text]
		{
		  i draw_order = 68;
		  i font_size = 12;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_1;
			justify = center;
		  i parent_offset = 16;
			rect = 487,355,571,373;
			text = "Off";
		  b visible = false;
		}
		[messages]
		{
			onbuttonpress = call(ToggleAttackAutomation$) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_defaults]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 58;
	  b help_tool_tip = true;
		rect = 421,415,610,439;
		[t:text,n:button_defaults_text]
		{
		  i draw_order = 68;
		  i font_size = 14;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			justify = center;
		  i parent_offset = 16;
			rect = 494,421,610,439;
			text = "Defaults";
		}
		[messages]
		{
			onbuttonpress = notify(default_options_game) & call(ResetAutomation$) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_defend_automation]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 421,380,571,404;
		[t:text,n:button_defend_automation_text]
		{
		  i draw_order = 68;
		  i font_size = 12;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_1;
			justify = center;
		  i parent_offset = 16;
			rect = 487,386,571,404;
			text = "Off";
		  b visible = false;
		}
		[messages]
		{
			onbuttonpress = call(ToggleDefendAutomation$) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_framerate]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 421,258,571,282;
		[t:text,n:button_framerate_text]
		{
		  i draw_order = 68;
		  i font_size = 14;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_1;
			justify = center;
		  i parent_offset = 16;
			rect = 496,264,571,282;
		}
		[messages]
		{
			onbuttonpress = notify(toggle_option_game_onscreenframerate) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_item_filters]
	{
	  b common_control = true;
		common_template = button_large;
		disable_color = 0x55FFFFFF;
	  i draw_order = 15;
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 421,318,571,342;
		[t:text,n:button_item_filter_text]
		{
		  i draw_order = 68;
		  i font_size = 14;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_1;
			justify = center;
		  i parent_offset = 16;
			rect = 462,324,571,342;
			text = "Customize...";
		}
		[messages]
		{
			onbuttonpress = notify(show_item_filters) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_more]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_more;
	  b help_tool_tip = true;
		rect = 221,414,361,438;
		[t:text,n:button_more_text]
		{
		  i draw_order = 68;
		  i font_size = 12;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_more;
			justify = center;
		  i parent_offset = 16;
			rect = 277,420,361,438;
			text = "More";
		}
		[messages]
		{
			onbuttonpress = notify(options_game_more) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_priority_boost]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 421,197,571,221;
		[t:text,n:button_priority_boost_text]
		{
		  i draw_order = 68;
		  i font_size = 12;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_1;
			justify = center;
		  i parent_offset = 16;
			rect = 496,203,571,221;
		}
		[messages]
		{
			onbuttonpress = notify(toggle_option_game_priority_boost) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_always_active]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 421,227,571,251;
		[t:text,n:button_always_active_text]
		{
		  i draw_order = 68;
		  i font_size = 12;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_1;
			justify = center;
		  i parent_offset = 16;
			rect = 481,233,571,251;
		}
		[messages]
		{
			onbuttonpress = call(ToggleAlwaysActive$) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_reset_dialogs]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_2;
	  b help_tool_tip = true;
		rect = 421,227,571,251;
		[t:text,n:button_reset_dialogs_text]
		{
		  i draw_order = 68;
		  i font_size = 12;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_2;
			justify = center;
		  i parent_offset = 16;
			rect = 481,233,571,251;
			text = "Reset";
		}
		[messages]
		{
			onbuttonpress = notify(option_game_reset_dialogs) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_showtooltips]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_2;
	  b help_tool_tip = true;
		rect = 421,167,571,191;
		[t:text,n:button_showtooltips_text]
		{
		  i draw_order = 68;
		  i font_size = 12;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_2;
			justify = center;
		  i parent_offset = 16;
			rect = 496,173,571,191;
		}
		[messages]
		{
			onbuttonpress = notify(toggle_option_game_showtooltips) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:button,n:button_tutorial_tips]
	{
	  b common_control = true;
		common_template = button_large;
		disable_color = 0x55FFFFFF;
	  i draw_order = 15;
		group = options_game_2;
	  b help_tool_tip = true;
		rect = 421,197,571,221;
		[t:text,n:button_tutorial_text]
		{
		  i draw_order = 68;
		  i font_size = 14;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_2;
			justify = center;
		  i parent_offset = 16;
			rect = 496,203,571,221;
		}
		[messages]
		{
			onbuttonpress = notify(toggle_option_game_tutorialtips) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:dialog_box,n:options_bg]
	{
	  b common_control = true;
		common_template = dialog_mp_sa-reserve-box;
	  i draw_order = 10;
		rect = 182,158,618,452;
	}
	[t:slider,n:slider_dialog_scroll_speed]
	{
	  b common_control = true;
		common_template = slider_track;
	  i disable_color = 1442840575;
	  i draw_order = 1007;
	  b dynamic_button = true;
		group = options_game_1;
	  i max_value = 100;
	  i min_value = 0;
		rect = 444,172,566,189;
	  b repeater_buttons = true;
		slide_axis = horizontal;
	  i step_value = 1;
		[messages]
		{
			onbuttonpress = playsound(s_ui_fe_slider_up);
			onchange = notify(slider_change_dialog_speed);
			onsliderlostfocus = playsound(s_ui_fe_slider_down);
		}
	}
	[t:text,n:slider_gamespeed_popuptext]
	{
	  f alpha = 0.600000;
	  b auto_size = true;
		background_color = 0xFF000000;
	  b background_fill = true;
		border_color = 0xFF808080;
	  i draw_order = 16;
		font_type = b_gui_fnt_12p_ringbearer-gold;
	  b has_border = true;
		rect = 81,70,81,82;
	  b topmost = true;
	  b visible = false;
	}
	[t:text_box,n:text_attack_automation]
	{
	  i draw_order = 72;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_1;
		justify = right;
	  i max_height = 36;
	  i max_width = 206;
		rect = 195,349,401,385;
		text = "Selected Hero Attack automation (Dungeon Siege I) ";
	}
	[t:text_box,n:text_defend_automation]
	{
	  i draw_order = 72;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_1;
		justify = right;
	  i max_height = 36;
	  i max_width = 206;
		rect = 195,380,401,416;
		text = "Selected Hero Defend automation (Dungeon Siege I) ";
	}
	[t:text,n:text_dialog_scroll]
	{
	  i draw_order = 70;
	  i font_size = 14;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_1;
		justify = right;
		rect = 131,167,401,191;
		text = "Dialog Box Text Scroll Speed";
	}
	[t:text,n:text_framerate_0]
	{
	  i draw_order = 1005;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		justify = right;
		rect = 131,258,401,282;
		text = "Display Onscreen Framerate";
		group = options_game_1;
	}
	[t:text,n:text_item_filters]
	{
	  i draw_order = 72;
	  i font_size = 12;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_1;
	  b help_tool_tip = true;
		justify = right;
		rect = 131,318,401,342;
		text = "Item Filters";
	}
	[t:text,n:text_priority_boost]
	{
	  i draw_order = 72;
	  i font_size = 14;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_1;
	  b help_tool_tip = true;
		justify = right;
		rect = 132,194,402,218;
		text = "Raise App Priority";
	}
	[t:text_box,n:text_always_active]
	{
	  b center_height = true;
	  i draw_order = 72;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_1;
		justify = right;
	  i max_height = 24;
	  i max_width = 206;
		rect = 195,227,401,251;
		text = "Always Active";
	}
	[t:text_box,n:text_reset_dialogs]
	{
	  b center_height = true;
	  i draw_order = 72;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_2;
		justify = right;
	  i max_height = 24;
	  i max_width = 206;
		rect = 195,227,401,251;
		text = "Reset all hidden help dialogs ";
	}
	[t:text,n:text_showtooltips]
	{
	  i draw_order = 72;
	  i font_size = 14;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_2;
	  b help_tool_tip = true;
		justify = right;
		rect = 131,167,401,191;
		text = "Show Rollover Help";
	}
	[t:text,n:text_tutorial_tips]
	{
	  i draw_order = 72;
	  i font_size = 12;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_2;
	  b help_tool_tip = true;
		justify = right;
		rect = 231,194,401,218;
		text = "Tutorial Tips";
	}
	[t:window,n:window_attack_automation]
	{
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 195,349,401,373;
	}
	[t:window,n:window_defend_automation]
	{
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 195,380,401,404;
	}
	[t:window,n:window_reset_dialogs]
	{
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 195,318,401,342;
	}

	[t:button,n:button_wireless_strength]
	{
	  b common_control = true;
		common_template = button_large;
	  i draw_order = 15;
		group = options_game_1;
	  b help_tool_tip = true;
		rect = 421,288,571,312;
		[t:text,n:button_wireless_strength_text]
		{
		  i draw_order = 68;
		  i font_size = 12;
			font_type = b_gui_fnt_12p_ringbearer-gold;
			group = options_game_1;
			justify = center;
		  i parent_offset = 16;
			rect = 496,294,571,312;
		}
		[messages]
		{
			onbuttonpress = notify(toggle_option_game_wireless_strength) & playsound(s_ui_fe_bttn_tiny_down);
		}
	}
	[t:text,n:text_wireless_strength]
	{
	  i draw_order = 72;
	  i font_size = 14;
		font_type = b_gui_fnt_12p_ringbearer-gold;
		group = options_game_1;
	  b help_tool_tip = true;
		justify = right;
		rect = 132,288,402,312;
		text = "Display Wireless Connection Strength";
	}
}
