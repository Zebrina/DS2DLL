#pragma once

#include "DS2DLL.h"

enum {
    LF_NONE             = CLEARED_FLAGS,
    LF_HUMAN_PLAYER     = EnumFlag(2),
    LF_COMPUTER_PLAYER  = EnumFlag(3),
    LF_DIRT             = EnumFlag(4),
    LF_SHALLOW_WATER    = EnumFlag(5),
    LF_DEEP_WATER       = EnumFlag(6),
    LF_ICE              = EnumFlag(7),
    LF_LAVA             = EnumFlag(8),
    LF_MIST             = EnumFlag(15),
    LF_SIZE1_MOVER      = EnumFlag(11),
    LF_SIZE2_MOVER      = EnumFlag(12),
    LF_SIZE3_MOVER      = EnumFlag(13),
    LF_SIZE4_MOVER      = EnumFlag(14),
    LF_HOVER            = EnumFlag(9),
    LF_BOSS             = EnumFlag(10),
    LF_CLEAR            = EnumFlag(29),
    LF_IS_WALL          = EnumFlag(30),
    LF_IS_FLOOR         = EnumFlag(31),
    LF_IS_WATER         = EnumFlag(32),
};

enum {
    WMT_NONE,
    WMT_IS_CLIENT_OK,
    WMT_IS_MCP_EVENT,
    WMT_IS_ENGAGED_EVENT,
    WMT_GO_IN_FRUSTUM,
    WMT_INGAME_ONLY,
    WMT_SEND_ONLY,
    WMT_ENGINE_ONLY,
    WMT_FLAMETHROWER_WANTS,
    WMT_SKRITBOT_WANTS,
    WMT_RPC,
    WMT_AI_WANTS,
};

// Placeholder
enum eTank__ {
    TANK_NONE,
    TANK_RESOURCE,
    TANK_MAP,
};

enum {
    FB_NONE,
    FB_OWNER,
    FB_CATALYST,
    FB_TARGET,
    FB_SKRIT,
};

enum {
    PHT_INVALID,
    PHT_PACKET,
    PHT_RETRY_PACKET,
    PHT_LOCAL_RETRY_PACKET,
    PHT_PACKET_COLL,
    PHT_TIME,
    PHT_VERSION,
};

enum {
    KILLS,
    DEATHS,
    MELEE_GAINED,
    RANGED_GAINED,
    CMAGIC_GAINED,
    NMAGIC_GAINED,
    GOLD_GAINED,
    LOOT_GAINED,
    LOOT_VALUE,
};

enum {
	MG_NONE,
	MG_ALL,
	MG_NATURE_ONLY,
	MG_COMBAT_ONLY,
	MG_MAGE_ONLY,
	MG_MELEE_ONLY,
	MG_RANGED_ONLY,
};

enum {
	DC_SKIN,
	DC_SHIELD,
};

enum {
	GNTL,
	HLMT,
	SUIT,
	BOOT,
};

enum {
	UIPVP_NOPVP,
	UIPVP_DISABLED,
	UIPVP_PENDING,
	UIPVP_ENABLED,
};

enum {
	UITO_NO_TEAM,
	UITO_PENDING_INVITE_REQUEST,
	UITO_PENDING_INVITE_REPLY,
	UITO_LEAVE_TEAM,
	UITO_KICK_PLAYER,
	UITO_NOT_TEAMMATE,
	UITO_INVALID,
};

enum {
	ROOM_LOBBY,
	ROOM_STAGING_AREA,
};

enum {
	GSPMID_DEFAULT,
	GSPMID_SEARCHRESULT_GETPROFILEINFO,
	GSPMID_SEARCHRESULT_ADDTOBUDDYLIST,
};

enum {
	CHAT_CMD_TELL,
	CHAT_CMD_REPLY,
	CHAT_CMD_RETELL,
	CHAT_CMD_FRIENDS,
	CHAT_CMD_AFK,
	CHAT_CMD_WHO,
	CHAT_CMD_IGNORE,
	CHAT_CMD_UNIGNORE,
	CHAT_CMD_LISTIGNORE,
	CHAT_CMD_HELP,
	CHAT_CMD_PING,
	CHAT_CMD_HOSTINFO,
	CHAT_CMD_KICK,
};

enum {
	BUTTON_FORMATION_ROW,
	BUTTON_FORMATION_DOUBLE_ROW,
	BUTTON_FORMATION_COLUMN,
	BUTTON_FORMATION_DOUBLE_COLUMN,
	BUTTON_FORMATION_PYRAMID,
	BUTTON_FORMATION_CIRCLE,
};

enum {
	LINE,
	DOUBLE_LINE,
	COLUMN,
	DOUBLE_COLUMN,
	WEDGE,
	CIRCLE,
};

enum {
	EBS_HIGH,
	EBS_LOW,
	EBS_CRITICAL,
};

enum {
	CMODE_NONE,
	CMODE_DOLLY,
	CMODE_ZOOM,
	CMODE_ORBIT,
	CMODE_CRANE,
	CMODE_TRACK,
	CMODE_NIS,
	CMODE_HOLD,
	CMODE_FSP,
};

enum {
	PANTS,
	SHIRTS,
	FACES,
	HAIR,
	HEADS,
};

enum {
	PRT_NONE,
	PRT_INVALID,
	PRT_VALID,
	PRT_WARNING,
};

// Placeholder
enum class eOption__ {
	INVALID,
	HOSTNAME,
	PASSWORD,
	GAMEVER,
	MAPNAME,
	MAXPLAYERS,
	NUMPLAYERS,
	UNKNOWN_07,
	GAMETYPE,
	BOOKMARK,
	DIFFICULTY,
	STARTSEL,
	NEWCHARONLY,
	PLAYERPAUSE,
	GAME_MODE,
	GOLDSHARE,
	MAX_PARTY,
	MAX_CHARS,
	CHAR_NUM,
	PARTY_LEVEL,
	CHAR_LEVEL,
	HADDR,
};

// Placeholder
enum eGameOption__ {
	GOT_INVALID,
	GOT_GAME_NAME,
	GOT_PASSWORD,
	GOT_VERSION,
	GOT_MAP,
	GOT_PLAYER_LIMIT,
	GOT_PLAYER_NUM,
	GOT_CONTENT_GUID,
	GOT_WORLD,
	GOT_WORLD_BOOKMARK,
	GOT_DIFFICULTY,
	GOT_SELECT_LOCATIONS,
	GOT_ALLOW_NEW_CHARACTERS,
	GOT_ALLOW_PAUSING,
	GOT_GAME_MODE,
	GOT_SHARE_GOLD,
	GOT_MAX_PARTY,
	GOT_CHARACTER_LIMIT,
	GOT_CHARACTER_NUM,
	GOT_PARTY_LEVEL,
	GOT_CHARACTER_LEVEL,
	GOT_HOST_ADDRESS,
};

// Placeholder
enum eGameE__ {
	GE_PLAYER_KILL,
	GE_PLAYER_DEATH,
};

enum DOCKBAR_TYPE {
	DOCKBAR_SCREEN,
	DOCKBAR_SCREEN_X,
	DOCKBAR_SCREEN_Y,
	DOCKBAR_SCREEN_X_SWITCH_Y,
	DOCKBAR_WINDOW,
} typedef eDockbarType;

enum eAction {
};

enum eActionOrigin {
	AO_INVALID,
	AO_USER,
	AO_REFLEX,
	AO_PARTY,
	AO_COMMAND,
	AO_FLICK,
	AO_USER_UPDATESTANCE,
};

enum eActive {

};

enum eActiveSkillDelivery {
	ASD_MELEE,
	ASD_RANGED,
	ASD_CAST,
};

enum eActor {

};

enum eActorAlignment {
	AA_GOOD,
	AA_NEUTRAL,
	AA_EVIL,
};

enum eAggro {

};

enum eAggroType {
	AT_NONE,
	AT_DAMAGE_MELEE,
	AT_DAMAGE_RANGED,
	AT_DAMAGE_COMBAT_MAGIC,
	AT_DAMAGE_NATURE_MAGIC,
	AT_ENEMY_CAST_HEAL,
	AT_ENEMY_LOOTED_ITEM,
	AT_ENEMY_USE_MAGIC,
	AT_ENEMY_USE_POWER,
	AT_ENEMY_USE_POTION,
	AT_ENEMY_KILLED_FRIEND,
	AT_ENEMY_DAMAGED_LEADER,
	AT_ENEMY_TAUNT,
	AT_RACE_HUMAN_RACE,
	AT_RACE_HALF_GIANT_RACE,
	AT_RACE_ELF_RACE,
	AT_RACE_DRYAD_RACE,
	AT_RACE_PET_RACE,
	AT_GENDER_MALE,
	AT_GENDER_FEMALE,
};

enum eAlignment {
	ALIGN_DEFAULT,
	ALIGN_UP_LEFT,
	ALIGN_UP_RIGHT,
	ALIGN_DOWN_LEFT,
	ALIGN_DOWN_RIGHT,
};

enum eAlteration {
	ALTER_INVALID,
	ALTER_GENERIC,
	ALTER_MAX_LIFE,
	ALTER_LIFE,
	ALTER_LIFE_TIMED_RESTORE,
	ALTER_LIFE_RECOVERY_UNIT,
	ALTER_LIFE_RECOVERY_PERIOD,
	ALTER_MAX_MANA,
	ALTER_MANA,
	ALTER_MANA_TIMED_RESTORE,
	ALTER_MANA_RECOVERY_UNIT,
	ALTER_MANA_RECOVERY_PERIOD,
	ALTER_MANA_COST,
	ALTER_MELEE_SPEED,
	ALTER_RANGED_SPEED,
	ALTER_CAST_SPEED,
	ALTER_MOVE_SPEED,
	ALTER_STRENGTH,
	ALTER_INTELLIGENCE,
	ALTER_DEXTERITY,
	ALTER_MELEE,
	ALTER_RANGED,
	ALTER_NATURE_MAGIC,
	ALTER_COMBAT_MAGIC,
	ALTER_ALL_PASSIVE_SKILLS,
	ALTER_MELEE_PASSIVE_SKILLS,
	ALTER_RANGED_PASSIVE_SKILLS,
	ALTER_NATURE_MAGIC_PASSIVE_SKILLS,
	ALTER_COMBAT_MAGIC_PASSIVE_SKILLS,
	ALTER_SKILL_SUITE,
	ALTER_MONSTER_LEVEL,
	ALTER_STRENGTH_TO_INTELLIGENCE,
	ALTER_STRENGTH_TO_DEXTERITY,
	ALTER_INTELLIGENCE_TO_DEXTERITY,
	ALTER_MELEE_TO_RANGED,
	ALTER_MELEE_TO_NATURE_MAGIC,
	ALTER_MELEE_TO_COMBAT_MAGIC,
	ALTER_RANGED_TO_NATURE_MAGIC,
	ALTER_RANGED_TO_COMBAT_MAGIC,
	ALTER_NATURE_MAGIC_TO_COMBAT_MAGIC,
	ALTER_CAN_CAST,
	ALTER_MELEE_RELOAD_DELAY,
	ALTER_RANGED_RELOAD_DELAY,
	ALTER_CAST_RELOAD_DELAY,
	ALTER_SACRIFICE,
	ALTER_HEALING_BONUS_PERCENT,
	ALTER_SUMMON_DAMAGE_BONUS_PERCENT,
	ALTER_SUMMON_ATTACK_SPEED_BONUS_PERCENT,
	ALTER_MARK_RENDING,
	ALTER_MARK_AGONY,
	ALTER_MARK_HARVEST,
	ALTER_MARK_FIRE,
	ALTER_ATTACK_CHANCE_TO_CAST_TEMPLATE,
	ALTER_DEFEND_CHANCE_TO_CAST_TEMPLATE,
	ALTER_MELEE_DAMAGE_MIN,
	ALTER_MELEE_DAMAGE_MAX,
	ALTER_MELEE_DAMAGE_PERCENT,
	ALTER_MELEE_DAMAGE_SOURCE_PERCENT,
	ALTER_RANGED_DAMAGE_MIN,
	ALTER_RANGED_DAMAGE_MAX,
	ALTER_RANGED_DAMAGE_PERCENT,
	ALTER_RANGED_DAMAGE_SOURCE_PERCENT,
	ALTER_CMAGIC_DAMAGE_MIN,
	ALTER_CMAGIC_DAMAGE_MAX,
	ALTER_CMAGIC_DAMAGE_PERCENT,
	ALTER_CMAGIC_DAMAGE_SOURCE_PERCENT,
	ALTER_NMAGIC_DAMAGE_MIN,
	ALTER_NMAGIC_DAMAGE_MAX,
	ALTER_NMAGIC_DAMAGE_PERCENT,
	ALTER_NMAGIC_DAMAGE_SOURCE_PERCENT,
	ALTER_ICE_DAMAGE_PERCENT,
	ALTER_FIRE_DAMAGE_PERCENT,
	ALTER_LIGHTNING_DAMAGE_PERCENT,
	ALTER_DEATH_DAMAGE_PERCENT,
	ALTER_CRITICAL_DAMAGE_BONUS_PERCENT,
	ALTER_CRITICAL_DAMAGE_MELEE_BONUS_PERCENT,
	ALTER_CRITICAL_CHANCE_MELEE_BONUS_PERCENT,
	ALTER_CRITICAL_DAMAGE_RANGED_BONUS_PERCENT,
	ALTER_CRITICAL_CHANCE_RANGED_BONUS_PERCENT,
	ALTER_CUSTOM_DAMAGE,
	ALTER_CUSTOM_DAMAGE_MELEE,
	ALTER_CUSTOM_DAMAGE_RANGED,
	ALTER_CUSTOM_DAMAGE_LIGHTNING,
	ALTER_CUSTOM_DAMAGE_ICE,
	ALTER_CUSTOM_DAMAGE_FIRE,
	ALTER_CUSTOM_DAMAGE_DEATH,
	ALTER_CUSTOM_DAMAGE_CHANCE,
	ALTER_CUSTOM_DAMAGE_CHANCE_MELEE,
	ALTER_CUSTOM_DAMAGE_CHANCE_RANGED,
	ALTER_POWER_DAMAGE_PERCENT,
	ALTER_MAGIC_POWER_DAMAGE_PERCENT,
	ALTER_LIFE_STEAL,
	ALTER_LIFE_STEAL_MELEE,
	ALTER_LIFE_STEAL_RANGED,
	ALTER_MANA_STEAL,
	ALTER_MANA_STEAL_MELEE,
	ALTER_MANA_STEAL_RANGED,
	ALTER_LIFE_BONUS,
	ALTER_MANA_BONUS,
	ALTER_PIERCING_DAMAGE_CHANCE,
	ALTER_PIERCING_DAMAGE_CHANCE_MELEE,
	ALTER_PIERCING_DAMAGE_CHANCE_RANGED,
	ALTER_PIERCING_DAMAGE_CHANCE_AMOUNT,
	ALTER_PIERCING_DAMAGE_CHANCE_AMOUNT_MELEE,
	ALTER_PIERCING_DAMAGE_CHANCE_AMOUNT_RANGED,
	ALTER_PIERCING_DAMAGE_RANGE,
	ALTER_PIERCING_DAMAGE_RANGE_MELEE,
	ALTER_PIERCING_DAMAGE_RANGE_RANGED,
	ALTER_RANGED_ATTACK_MANA_DAMAGE,
	ALTER_RANGED_ATTACK_MANA_DRAIN,
	ALTER_MELEE_ATTACK_MANA_DAMAGE,
	ALTER_MELEE_ATTACK_MANA_DRAIN,
	ALTER_DAMAGE_BONUS_TO_UNDEAD,
	ALTER_DAMAGE_BONUS_TO_TYPE,
	ALTER_CHANCE_TO_HIT,
	ALTER_CHANCE_TO_HIT_MELEE,
	ALTER_CHANCE_TO_HIT_RANGED,
	ALTER_CHANCE_FOR_AIMING_ERROR,
	ALTER_AIMING_ERROR,
	ALTER_EXPERIENCE_GAINED,
	ALTER_MELEE_EXP_PERCENT,
	ALTER_RANGED_EXP_PERCENT,
	ALTER_CMAGIC_EXP_PERCENT,
	ALTER_NMAGIC_EXP_PERCENT,
	ALTER_ARMOR,
	ALTER_ARMOR_PERCENT,
	ALTER_ARMOR_SOURCE_PERCENT,
	ALTER_INVINCIBILITY,
	ALTER_BLOCK_DAMAGE,
	ALTER_BLOCK_MELEE_DAMAGE,
	ALTER_BLOCK_RANGED_DAMAGE,
	ALTER_BLOCK_COMBAT_MAGIC_DAMAGE,
	ALTER_BLOCK_NATURE_MAGIC_DAMAGE,
	ALTER_BLOCK_PIERCING_DAMAGE,
	ALTER_BLOCK_CUSTOM_DAMAGE,
	ALTER_BLOCK_PART_DAMAGE,
	ALTER_BLOCK_PART_MELEE_DAMAGE,
	ALTER_BLOCK_PART_RANGED_DAMAGE,
	ALTER_BLOCK_PART_COMBAT_MAGIC_DAMAGE,
	ALTER_BLOCK_PART_NATURE_MAGIC_DAMAGE,
	ALTER_BLOCK_PART_PIERCING_DAMAGE,
	ALTER_BLOCK_PART_CUSTOM_DAMAGE,
	ALTER_CHANCE_TO_BLOCK_MELEE_DAMAGE,
	ALTER_CHANCE_TO_BLOCK_RANGED_DAMAGE,
	ALTER_CHANCE_TO_BLOCK_CMAGIC_DAMAGE,
	ALTER_CHANCE_TO_BLOCK_NMAGIC_DAMAGE,
	ALTER_CHANCE_TO_BLOCK_MELEE_DAMAGE_AMOUNT,
	ALTER_CHANCE_TO_BLOCK_RANGED_DAMAGE_AMOUNT,
	ALTER_CHANCE_TO_BLOCK_CMAGIC_DAMAGE_AMOUNT,
	ALTER_CHANCE_TO_BLOCK_NMAGIC_DAMAGE_AMOUNT,
	ALTER_CHANCE_TO_DODGE_HIT,
	ALTER_CHANCE_TO_DODGE_HIT_MELEE,
	ALTER_CHANCE_TO_DODGE_HIT_RANGED,
	ALTER_REFLECT_DAMAGE,
	ALTER_REFLECT_FIXED_DAMAGE,
	ALTER_REFLECT_DAMAGE_CHANCE,
	ALTER_REFLECT_PIERCING_DAMAGE,
	ALTER_REFLECT_PIERCING_DAMAGE_CHANCE,
	ALTER_REFLECT_DAMAGE_TO_SELF,
	ALTER_MANA_SHIELD,
	ALTER_DAMAGE_TO_MANA_PERCENT,
	ALTER_ATTACK_CHANCE_TO_PENETRATE,
	ALTER_GOLD_VALUE, // Unused?
	ALTER_REQUIREMENTS, // Unused?
	ALTER_MAGIC_FIND_CHANCE,
	ALTER_POWER_RELOAD,
	ALTER_GOLD_DROPPED,
	ALTER_FREEZE_CHANCE,
	ALTER_MELEE_RESISTANCE,
	ALTER_RANGED_RESISTANCE,
	ALTER_LIGHTNING_RESISTANCE,
	ALTER_ICE_RESISTANCE,
	ALTER_FIRE_RESISTANCE,
	ALTER_DEATH_RESISTANCE,
	ALTER_NON_ELEMENTAL_RESISTANCE,
	ALTER_PHYSICAL_RESISTANCE,
	ALTER_ELEMENTAL_RESISTANCE,
	ALTER_MAGICAL_RESISTANCE,
	ALTER_STATE_RESISTANCE,
	ALTER_DEBUFF_RESISTANCE,
	ALTER_BUFF_RESISTANCE,
    ALTER_USER_DEFINED,
};

enum eAnim {

};

enum eAnimChore {
	CHORE_INVALID,
	CHORE_NONE,
	CHORE_ERROR,
	CHORE_DEFAULT,
	CHORE_WALK,
	CHORE_DIE,
	CHORE_DEFEND,
	CHORE_ATTACK,
	CHORE_MAGIC,
	CHORE_FIDGET,
	CHORE_ROTATE,
	CHORE_OPEN,
	CHORE_CLOSE,
	CHORE_MISC,
	CHORE_RAILMOVE,
};

enum eAnimEvent {

};

enum eAnimStance {
	AS_DEFAULT,
	AS_PLAIN,
	AS_SINGLE_MELEE,
	AS_SINGLE_MELEE_AND_SHIELD,
	AS_TWO_HANDED_MELEE,
	AS_TWO_HANDED_SWORD,
	AS_STAFF,
	AS_BOW_AND_ARROW,
	AS_MINIGUN,
	AS_SHIELD_ONLY,
	AS_DUAL_WIELD,
	AS_THROWABLE,
};

enum eActorDisposition {

};

enum eAttack {

};

enum eAttackClass {
	AC_BEASTFU,
	AC_AXE,
	AC_CLUB,
	AC_DAGGER,
	AC_HAMMER,
	AC_MACE,
	AC_STAFF,
	AC_SWORD,
	AC_CESTUS,
	AC_BOW,
	AC_MINIGUN,
	AC_ARROW,
	AC_BOLT,
	AC_COMBAT_MAGIC,
	AC_NATURE_MAGIC,
};

enum eAxis {

};

enum eAxisHint {
    AH_NONE,
    AH_XAXIS_POSITIVE,
    AH_XAXIS_NEGATIVE,
    AH_YAXIS_POSITIVE,
    AH_YAXIS_NEGATIVE,
    AH_ZAXIS_POSITIVE,
    AH_ZAXIS_NEGATIVE,
};

enum eCamera {

};

enum eCameraInterp {
    CI_TIME_LINEAR,
    CI_TIME_EASE_IN,
    CI_TIME_EASE_OUT,
    CI_TIME_EASE_BETWEEN,
    CI_SMOOTH,
};

enum eCameraOrder {
    COR_SNAP,
    COR_PAN,
    COR_OFFSETPAN,
    COR_SPLINE,
};

enum eCombat {

};

enum eCombatOrders {

};

enum eCreate {

};

enum eDamage {

};

// Unverified.
enum eDamageType {
	DMT_NONE,
	DMT_MELEE,
	DMT_RANGED,
	DMT_LIGHTNING,
	DMT_ICE,
	DMT_FIRE,
	DMT_DEATH,
	DMT_NON_ELEMENTAL,
	DMT_PHYSICAL,
	DMT_ELEMENTAL,
	DMT_MAGICAL,
};

enum eDebug {

};

enum eDebugHudOptions : uint {
	DBGHUD_NONE = CLEARED_FLAGS,
	DBGHUD_UNKNOWN_01 = EnumFlag(1),
	DBGHUD_UNKNOWN_02 = EnumFlag(2),
	DBGHUD_UNKNOWN_03 = EnumFlag(3),
	DBGHUD_UNKNOWN_04 = EnumFlag(4),
	DBGHUD_UNKNOWN_05 = EnumFlag(5),
	DBGHUD_UNKNOWN_06 = EnumFlag(6),
	DBGHUD_UNKNOWN_07 = EnumFlag(7),
	DBGHUD_UNKNOWN_08 = EnumFlag(8),
	DBGHUD_UNKNOWN_09 = EnumFlag(9),
	DBGHUD_UNKNOWN_10 = EnumFlag(10),
	DBGHUD_UNKNOWN_11 = EnumFlag(11),
	DBGHUD_UNKNOWN_12 = EnumFlag(12),
	DBGHUD_UNKNOWN_13 = EnumFlag(13),
	DBGHUD_UNKNOWN_14 = EnumFlag(14),
	DBGHUD_UNKNOWN_15 = EnumFlag(15),
	DBGHUD_UNKNOWN_16 = EnumFlag(16),
	DBGHUD_UNKNOWN_17 = EnumFlag(17),
	DBGHUD_UNKNOWN_18 = EnumFlag(18),
	DBGHUD_UNKNOWN_19 = EnumFlag(19),
	DBGHUD_UNKNOWN_20 = EnumFlag(20),
	DBGHUD_UNKNOWN_21 = EnumFlag(21),
	DBGHUD_UNKNOWN_22 = EnumFlag(22),
	DBGHUD_UNKNOWN_23 = EnumFlag(23),
	DBGHUD_UNKNOWN_24 = EnumFlag(24),
	DBGHUD_UNKNOWN_25 = EnumFlag(25),
	DBGHUD_UNKNOWN_26 = EnumFlag(26),
	DBGHUD_UNKNOWN_27 = EnumFlag(27),
	DBGHUD_UNKNOWN_28 = EnumFlag(28),
	DBGHUD_UNKNOWN_29 = EnumFlag(29),
	DBGHUD_UNKNOWN_30 = EnumFlag(30),
	DBGHUD_UNKNOWN_31 = EnumFlag(31),
	DBGHUD_UNKNOWN_32 = EnumFlag(32),
};

enum EDGE_TYPE {
	EDGE_TOP,
	EDGE_BOTTOM,
	EDGE_LEFT,
	EDGE_RIGHT,
	EDGE_HALF_CIRCLE_TOP,
	EDGE_HALF_CIRCLE_BOTTOM,
} typedef eEdgeType;

enum eDifficulty {
	DIFFICULTY_EASY,
	DIFFICULTY_MEDIUM,
	DIFFICULTY_HARD,
};

enum eDrop {

};

// Only referenced by Server.
enum eDropInvOption {
	//DIO_Spew,
	//DIO_Array,
};

enum eEntry {

};

enum eEntryType {
	NONE,
	QUEST_ITEM,
	BOOK,
	MAP,
	SCROLL,
	CHANT,
};

enum eEquip {

};

enum eEquipSlot {
	ES_SHIELD_HAND,
	ES_WEAPON_HAND,
	ES_FEET,
	ES_CHEST,
	ES_HEAD,
	ES_FOREARMS,
	ES_AMULET,
	ES_SPELLBOOK,
	ES_RING_0,
	ES_RING_1,
	ES_RING_2,
	ES_RING_3,
	ES_RING,
	ES_NONE,
	ES_ANY,
};

enum eFade {

};

enum eFadeType {
	FT_NONE,
	FT_ALPHA,
	FT_BLACK,
	FT_IN,
	FT_INSTANT,
	FT_IN_INSTANT,
};

enum eFocus {

};

enum eFocusOrders {

};

enum eGame {

};

enum eGamespy {

};

enum eGamespyEvent {
	GSE_ERROR,
	GSE_PROGRESS_UPDATE,
	GSE_PROFILE_SIGNIN_SUCCESS,
	GSE_PROFILE_SIGNIN_FAILED,
	GSE_GAMEROOM_ENTER,
	GSE_GAMEROOM_LEAVE,
	GSE_BUDDYLIST_PROFILE,
	GSE_BUDDYLIST_PROFILE_INFO,
	GSE_BUDDYLIST_STATUS_UPDATE,
	GSE_BUDDYLIST_BUDDY_MESSAGE,
	GSE_BUDDYLIST_GAME_INVITE,
	GSE_BUDDYLIST_BUDDY_REQUEST,
	GSE_BUDDYLIST_SEARCH_RESULT,
	GSE_ACCOUNT_NEW_ACCOUNT,
	GSE_ACCOUNT_NEW_PROFILE,
	GSE_ACCOUNT_NICKNAME_LIST,
	GSE_ACCOUNT_PROFILE_CONNECT,
	GSE_ACCOUNT_PROFILE_DISCONNECT,
	GSE_ACCOUNT_PEER_CONNECT,
	GSE_ACCOUNT_PEER_DISCONNECT,
	GSE_ACCOUNT_CDKEY_VALIDATION,
	GSE_ACCOUNT_NICKNAME_ERROR,
	GSE_STAGINGROOM_GAME_STARTED,
	GSE_STAGINGROOM_PLAYER_READY,
	GSE_STAGINGROOM_PLAYER_CHANGE_NICKNAME,
	GSE_STAGINGROOM_PLAYER_JOINED,
	GSE_STAGINGROOM_PLAYER_LEFT,
	GSE_STAGINGROOM_PLAYER_INFO,
	GSE_STAGINGROOM_PLAYER_KICKED,
	GSE_STAGINGROOM_PLAYER_ENUM,
	GSE_STAGINGROOM_PLAYER_FLAGS_CHANGED,
	GSE_STAGINGROOM_PLAYER_OPTION_CHANGED,
	GSE_STAGINGROOM_ROOM_CREATED,
	GSE_STAGINGROOM_ROOM_JOINED,
	GSE_STAGINGROOM_ROOM_MESSAGE,
	GSE_STAGINGROOM_ROOM_MODE_CHANGED,
	GSE_STAGINGROOM_ROOM_KEY_CHANGED,
	GSE_STAGINGROOM_ROOM_NAME_CHANGED,
	GSE_STAGINGROOM_ROOM_PRIVATE_MESSAGE,
	GSE_LISTGAME_START,
	GSE_LISTGAME_END,
	GSE_GAMELIST_GAME_ADD,
	GSE_GAMELIST_GAME_REMOVE,
	GSE_GAMELIST_GAME_UPDATE,
	GSE_GAMELIST_PLAYER_CHANGE_NICKNAME,
	GSE_GAMELIST_PLAYER_JOINED,
	GSE_GAMELIST_PLAYER_LEFT,
	GSE_GAMELIST_PLAYER_INFO,
	GSE_GAMELIST_PLAYER_KICKED,
	GSE_GAMELIST_PLAYER_ENUM,
	GSE_GAMELIST_PLAYER_FLAGS_CHANGED,
	GSE_GAMELIST_PLAYER_KEY_CHANGED,
	GSE_GAMELIST_PLAYER_PRIVATE_MESSAGE,
	GSE_GAMELIST_ROOM_CREATED,
	GSE_GAMELIST_ROOM_JOINED,
	GSE_GAMELIST_ROOM_MESSAGE,
	GSE_GAMELIST_ROOM_MODE_CHANGED,
	GSE_GAMELIST_ROOM_KEY_CHANGED,
	GSE_GAMELIST_ROOM_NAME_CHANGED,
	GSE_GAMELIST_ROOM_PRIVATE_MESSAGE,
	GSE_CHAT_LIST_ROOMS,
	GSE_CHAT_KEY_CHANGED,
	GSE_CHAT_USER_LIST,
	GSE_CHAT_USER_MODE_CHANGED,
	GSE_CHAT_USER_CHANGED_NICK,
	GSE_CHAT_USER_PARTED,
	GSE_CHAT_USER_JOINED,
	GSE_CHAT_USER_KICKED,
	GSE_CHAT_CHANNEL_MODE_CHANGED,
	GSE_CHAT_CHANNEL_TOPIC_CHANGED,
	GSE_CHAT_CHANNEL_MESSAGE,
	GSE_CHAT_CHANNEL_ENTERED,
	GSE_GROUPROOM_NEW_ROOM,
	GSE_PEER_PLAYER_MESSAGE,
	GSE_PEER_PLAYER_PRIVATE_MESSAGE,
	GSE_AUTOMATCH_STATUS,
	GSE_AUTOMATCH_RESULT,
	GSE_PERSIST_UPLOAD_COMPLETE,
	GSE_PERSIST_DOWNLOAD_COMPLETE,
	GSE_PERSIST_PARTYLIST_COMPLETE,
	GSE_PERSIST_AUTHENTICATION,
	GSE_BACKEEND_VALIDATE_RESULT,
	GSE_PATCH_CHECK_RESULT,
	GSE_PATCH_DOWNLOAD_PROGRESS,
	GSE_PATCH_DOWNLOAD_COMPLETE,
};

enum eGo {

};

enum eGoBitType {
	GOBIT_DEFAULT,
	GOBIT_PERSIST_WITH_CHARACTER,
};

enum eGoClass {
	// Global go (normal) - must be replicated across all machines (marshalled by the server).
	GO_CLASS_GLOBAL,
	// Local-only go for waypoints and other client-only gizmos.
	GO_CLASS_LOCAL,
	// Clone source go (ammo).
	GO_CLASS_SRC,
	// Special constant.
	GO_CLASS_CONSTANT,
	UNKNOWN,
};

enum eInventory {

};

enum eInventoryLocation {
	IL_HAND_1,
	IL_HAND_2,
	IL_SPELL_1,
	IL_SPELL_2,
	IL_SPELL_3,
	IL_SPELL_4,
	IL_SPELL_5,
	IL_SPELL_6,
	IL_SPELL_7,
	IL_SPELL_8,
	IL_SPELL_9,
	IL_SPELL_10,
	IL_INVALID,
	IL_ALL,
	IL_ALL_ACTIVE,
	IL_ALL_SPELLS,
	IL_MAIN,
	IL_STASIS,
};

enum eItem {

};

enum eItemL__ {
    ITL_INVALID,
    ITL_SHORT,
    ITL_REGULAR,
    ITL_LONG,
};

enum eItemSkillType {
	IST_NONE            = EnumFlag(1),
	IST_FIGHTER         = EnumFlag(2),
	IST_RANGER          = EnumFlag(3),
	IST_NMAGE           = EnumFlag(4),
	IST_CMAGE           = EnumFlag(5),
	IST_BLOOD_ASSASSIN  = EnumFlag(6),
	IST_FIST_OF_STONE   = EnumFlag(7),
	IST_MAGE            = IST_NMAGE | IST_CMAGE,
};

enum eItemSpeed {
    ITS_INVALID,
    ITS_SLOW,
    ITS_SLOWER,
    ITS_SLOWEST,
    ITS_NORMAL,
    ITS_FAST,
    ITS_FASTER,
    ITS_FASTEST,
};

enum eItemUsage {
    ITU_STANDARD,
    ITU_TWO_HANDED,
    ITU_DUAL_WIELD,
    ITU_THROWN,
};

enum eJob {

};

enum eJobAbstractType {
	JAT_INVALID,
	JAT_NONE,
	JAT_ATTACK_OBJECT_MELEE,
	JAT_ATTACK_OBJECT_RANGED,
	JAT_ATTACK_POSITION_MELEE,
	JAT_ATTACK_POSITION_RANGED,
	JAT_BRAIN,
	JAT_CAST,
	JAT_CAST_POSITION,
	JAT_CAST_POWER,
	JAT_CAST_POWER_POSITION,
	JAT_CHARGE_OBJECT,
	JAT_COLLECT_LOOT,
	JAT_DIE,
	JAT_DO_SE_COMMAND,
	JAT_DRINK,
	JAT_DROP,
	JAT_EQUIP,
	JAT_FACE,
	JAT_FIDGET,
	JAT_FLEE_FROM_OBJECT,
	JAT_FOLLOW,
	JAT_GAIN_CONSCIOUSNESS,
	JAT_GET,
	JAT_GIVE,
	JAT_GUARD,
	JAT_HIDE,
	JAT_JUMP,
	JAT_KNOCKBACK,
	JAT_LISTEN,
	JAT_MOVE,
	JAT_PATROL,
	JAT_SLIDE,
	JAT_STARTUP,
	JAT_STARTUP_REVEAL,
	JAT_STOP,
	JAT_TALK,
	JAT_TELEPORT,
	JAT_UNCONSCIOUS,
	JAT_USE,
	// Skrit defined.
	JAT_PAUSE,
	JAT_PLAY_ANIM,
	JAT_ENGAGE,
	JAT_PLAY_BATTLE_YELL,
	JAT_PLAY_CAUTIOUS_ATTACK,
	JAT_PLAY_CAUTIOUS_RANGED_ATTACK,
	JAT_PLAY_RANGED_FLEE,
	JAT_PLAY_LEADER_GUARD,
	JAT_PLAY_MOB_ATTACK,
	JAT_PLAY_CHARGE,
	JAT_PLAY_HIDE_FLANK,
	JAT_PLAY_THIEF,
	JAT_PLAY_ZARAMOTH,
	JAT_PLAY_SUICIDE_BOMBER,
	JAT_PLAY_FLAME_EFFIGY,
	JAT_PLAY_THRALL_CHAMPION,
	JAT_PARTY_FOLLOW,
};

enum eJobAttribute {
	JA_NONE,
	JA_PASSIVE,
	JA_TIMID,
	JA_AGGRESSIVE,
	JA_SUICIDAL,
	JA_UNDEAD,
	JA_INSECT,
	JA_ANIMAL,
	JA_PRIMITIVE,
	JA_CIVILIZED,
	JA_ADVANCED,
	JA_OVERWHELMED,
	JA_SMALLER,
	JA_SAME,
	JA_LARGER,
	JA_OVERWHELMING,
	JA_RANGED,
	JA_MELEE,
	JA_CAUTIOUS,
	JA_CHARGE,
	JA_FLANKS,
	JA_LEADER,
	JA_MOB_ATTACK,
	JA_RANGED_FLEE,
	JA_THIEF,
	JA_SUICIDE_BOMBER,
	JA_ZARAMOTH,
	JA_FLAME_EFFIGY,
	JA_THRALL_CHAMPION,
};

enum eJobQ {

};

enum eJobResult {
	JR_INVALID,
	JR_UNKNOWN,
	JR_OK,
	JR_FAILED,
	JR_FAILED_NO_PATH,
	JR_FAILED_NO_PATH_TRY_AGAIN,
	JR_FAILED_BAD_PARAMS,
	JR_FAILED_LEFT_FRUSTUM,
};

enum eLife {

};

enum eLifeState {
	LS_IGNORE,
	LS_ALIVE_CONSCIOUS,
	LS_ALIVE_UNCONSCIOUS,
	LS_DEAD_NORMAL,
	LS_DECAY_FRESH,
	LS_DECAY_BONES,
	LS_DECAY_DUST,
	LS_GONE,
};

enum eLoot {

};

enum eLootFilter {
	LTF_INVALID,
	// Active by default, no way to toggle via options.
	// Includes reagents and spellbooks.
	LTF_MISC				= EnumFlag(1),
	LTF_NORMAL_WEAPONS		= EnumFlag(2),
	LTF_ENCHANTED_WEAPONS   = EnumFlag(3),
	LTF_NORMAL_ARMOR		= EnumFlag(4),
	LTF_ENCHANTED_ARMOR		= EnumFlag(5),
	LTF_JEWELRY				= EnumFlag(6),
	// Active by default, no way to toggle via options.
	LTF_QUEST_ITEMS			= EnumFlag(7),
	LTF_HEALTH_POTIONS		= EnumFlag(8),
	LTF_MANA_POTIONS		= EnumFlag(9),
	LTF_SPELLS				= EnumFlag(10),
	LTF_GOLD				= EnumFlag(11),
	LTF_LOREBOOKS			= EnumFlag(12),
	LTF_ALL					= LTF_MISC | LTF_NORMAL_WEAPONS | LTF_ENCHANTED_WEAPONS | LTF_NORMAL_ARMOR |
                              LTF_ENCHANTED_ARMOR | LTF_JEWELRY | LTF_QUEST_ITEMS | LTF_HEALTH_POTIONS |
                              LTF_MANA_POTIONS | LTF_SPELLS | LTF_GOLD | LTF_LOREBOOKS,
};

enum eMagic {

};

// Only referenced by GoMagic.
enum eMagicClass {
	MC_NONE,
	MC_POTION,
	MC_COMBAT_MAGIC,
	MC_NATURE_MAGIC,
};

enum eMini {

};

enum eMood {

};

enum eMoodRoomType {
	RT_GENERIC,
	RT_PADDEDCELL,
	RT_ROOM,
	RT_BATHROOM,
	RT_LIVINGROOM,
	RT_STONEROOM,
	RT_AUDITORIUM,
	RT_CONCERTHALL,
	RT_CAVE,
	RT_ARENA,
	RT_HANGAR,
	RT_CARPETEDHALLWAY,
	RT_HALLWAY,
	RT_STONECORRIDOR,
	RT_ALLEY,
	RT_FOREST,
	RT_CITY,
	RT_MOUNTAINS,
	RT_QUARRY,
	RT_PLAIN,
	RT_PARKINGLOT,
	RT_SEWERPIPE,
	RT_UNDERWATER,
	RT_DRUGGED,
	RT_DIZZY,
	RT_PSYCHOTIC,
};

enum eMiniGame {

};

enum eMovement {

};

enum eMovementOrders {

};

enum ePClass {
    INVALID = CLEARED_FLAGS,
	NORMAL	= EnumFlag(1),
	RARE	= EnumFlag(2),
	UNIQUE	= EnumFlag(3),
	SET		= EnumFlag(4),
    ALL     = NORMAL | RARE | UNIQUE | SET,
	USER_DEFINED  = EnumFlag(5),
};

enum ePContentType {
	PT_ARMOR,
	PT_WEAPON,
	PT_AMULET,
	PT_RING,
	PT_SPELL,
	PT_SCROLL,
	PT_POTION,
	PT_SPELLBOOK,
	PT_REAGENT,
	PT_RECIPE,
	PT_BODY,
	PT_HELM,
	PT_GLOVES,
	PT_BOOTS,
	PT_SHIELD,
	PT_MELEE,
	PT_RANGED,
	PT_POTION_HEALTH,
	PT_POTION_MANA,
	PT_CMAGIC,
	PT_NMAGIC,
	PT_INVALID,
};

enum ePhysics {

};

enum ePixel {

};

enum ePixelBlend {
	PB_NONE,
	PB_ZERO,
	PB_ONE,
	PB_SRCCOLOR,
	PB_INVSRCCOLOR,
	PB_SRCALPHA,
	PB_INVSRCALPHA,
	PB_DESTALPHA,
	PB_INVDESTALPHA,
	PB_DESTCOLOR,
	PB_INVDESTCOLOR,
	PB_SRCALPHASAT,
	PB_BOTHSRCALPHA,
	PB_BOTHINVSRCALPHA,
};

enum ePlayer {

};

enum ePlayerController {
	PC_INVALID,
	PC_HUMAN,
	PC_COMPUTER,
	PC_REMOTE_HUMAN,
	PC_REMOTE_COMPUTER,
};

enum ePlayerSkin {

};

enum ePos {

};

enum ePosHint {
	PH_NONE,
	PH_LINEAR,
	PH_EASE_BETWEEN,
	PH_EASE_OUT,
	PH_EASE_IN,
};

enum eQPlace {

};

enum eQuery {

};

enum eQueryTrait {
	QT_NONE,
	QT_ANY,
	QT_LIFE,
	QT_LIFE_LOW,
	QT_LIFE_HIGH,
	QT_LIFE_HEALING,
	QT_LIFE_DAMAGING,
	QT_MANA,
	QT_MANA_LOW,
	QT_MANA_HIGH,
	QT_MANA_HEALING,
	QT_MANA_DAMAGING,
	QT_REANIMATING,
	QT_ALIVE_CONSCIOUS,
	QT_ALIVE_UNCONSCIOUS,
	QT_ALIVE,
	QT_DEAD,
	QT_WEAPON,
	QT_MELEE_WEAPON,
	QT_RANGED_WEAPON,
	QT_MELEE_WEAPON_SELECTED,
	QT_RANGED_WEAPON_SELECTED,
	QT_ONE_SHOT_SPELL,
	QT_MULTIPLE_SHOT_SPELL,
	QT_COMMAND_CAST_SPELL,
	QT_AUTO_CAST_SPELL,
	QT_FIGHTING,
	QT_UNDER_ATTACK,
	QT_UNDER_MELEE_ATTACK,
	QT_ACTOR,
	QT_ITEM,
	QT_POTION,
	QT_SPELL,
	QT_ARMOR,
	QT_ARMOR_WEARABLE,
	QT_SHIELD,
	QT_BREAKABLE,
	QT_CASTABLE,
	QT_ATTACKABLE,
	QT_AUTO_ATTACKABLE,
	QT_SELECTED,
	QT_NONSELECTED,
	QT_VISIBLE,
	QT_INVISIBLE,
	QT_HAS_LOS,
	QT_PACK,
	QT_NONPACK,
	QT_BUSY,
	QT_IDLE,
	QT_GOOD,
	QT_NEUTRAL,
	QT_EVIL,
	QT_FRIEND,
	QT_ENEMY,
	QT_SURVIVAL_FACTOR,
	QT_OFFENSE_FACTOR,
};

enum eQuest {

};

enum eQuestState {
	QSTATE_NONE,
	QSTATE_DEACTIVATED,
	QSTATE_ACTIVATED,
	QSTATE_VIEWED,
	QSTATE_COMPLETED,
};

enum eQuickSlotSkill {
	QS_ACTIVE_SLOT,
	QS_SLOT_1,
	QS_SLOT_2,
	QS_SLOT_3,
	QS_SLOT_4,
};

enum eRibbon {

};

enum eRibbonAlign {
	RA_NONE,
	RA_CAMERA_XAXIS,
	RA_CAMERA_YAXIS,
	RA_CAMERA_ZAXIS,
	RA_TOTARGET_XAXIS,
	RA_TOTARGET_YAXIS,
};

enum eRoom {

};

enum eStanding {

};

enum eStandingOrders {
	SO_NONE,
	SO_AGGRESSIVE,
	SO_GUARD,
	SO_MIRROR,
	SO_WAIT,
};

enum eGameStat {

};

enum eTarget {
};

enum eTargetTypeFlags : uint {
	TT_NONE					= CLEARED_FLAGS,
	TT_AND					= EnumFlag(1),
	TT_ACTOR				= EnumFlag(2),
	TT_ACTOR_PACK_ONLY		= EnumFlag(3),
	TT_NOT_ACTOR			= EnumFlag(4),
	TT_SELF					= EnumFlag(5),
	TT_BREAKABLE			= EnumFlag(6),
	TT_CAN_STORE_MANA		= EnumFlag(7),
	TT_INJURED_FRIEND		= EnumFlag(8),
	TT_DEAD_FRIEND			= EnumFlag(9),
	TT_UNCONSCIOUS_FRIEND	= EnumFlag(10),
	TT_CONSCIOUS_FRIEND		= EnumFlag(11),
	TT_DEAD_ENEMY			= EnumFlag(12),
	TT_UNCONSCIOUS_ENEMY	= EnumFlag(13),
	TT_CONSCIOUS_ENEMY		= EnumFlag(14),
	TT_DEAD_ACTOR			= EnumFlag(15),
	TT_UNCONSCIOUS_ACTOR	= EnumFlag(16),
	TT_CONSCIOUS_ACTOR		= EnumFlag(17),
	TT_SUMMONED				= EnumFlag(18),
	TT_POSSESSED			= EnumFlag(19),
	TT_ANIMATED				= EnumFlag(20),
	TT_HUMAN_PARTY_MEMBER	= EnumFlag(21),
	TT_SCREEN_PARTY_MEMBER	= EnumFlag(22),
	TT_GOOD					= EnumFlag(23),
	TT_NEUTRAL				= EnumFlag(24),
	TT_EVIL					= EnumFlag(25),
	TT_WEAPON_MELEE			= EnumFlag(26),
	TT_WEAPON_RANGED		= EnumFlag(27),
	TT_ARMOR				= EnumFlag(28),
	TT_SHIELD				= EnumFlag(29),
	TT_EQUIPPABLE			= EnumFlag(30),
	TT_TRANSMUTABLE			= EnumFlag(31),
	TT_TERRAIN				= EnumFlag(32),
};

enum eTexture {

};

enum eTextureOp {
	TO_NONE,
	TO_DISABLE,
	TO_ARG1,
	TO_ARG2,
	TO_MODULATE,
	TO_MODULATE2X,
	TO_MODULATE4X,
	TO_ADD,
	TO_ADDSIGNED,
	TO_ADDSIGNED2X,
	TO_SUBTRACT,
	TO_ADDSMOOTH,
	TO_BLENDDIFFUSEALPHA,
	TO_BLENDTEXTUREALPHA,
	TO_BLENDFACTORALPHA,
	TO_BLENDTEXTUREALPHAPM,
	TO_BLENDCURRENTALPHA,
	TO_PREMODULATE,
	TO_MODULATEALPHA_ADDCOLOR,
	TO_MODULATECOLOR_ADDALPHA,
	TO_MODULATEINVALPHA_ADDCOLOR,
	TO_MODULATEINVCOLOR_ADDALPHA,
	TO_BUMPENVMAP,
	TO_BUMPENVMAPLUMINANCE,
	TO_DOTPRODUCT3,
	TO_MULTIPLYADD,
};

enum eTuning {

};

enum eTuningGridDoor {
	TGD_TOP,
	TGD_BOTTOM,
	TGD_LEFT,
	TGD_RIGHT,
	TGD_FORWARD,
	TGD_BACKWARD,
};

enum eUIMessage {
	MSG_NONE,
	MSG_ONINVISIBLE,
	MSG_ONVISIBLE,
	MSG_ONLBUTTONDOWN,
	MSG_ONLBUTTONUP,
	MSG_ONRBUTTONDOWN,
	MSG_ONRBUTTONUP,
	MSG_ONMBUTTONDOWN,
	MSG_ONMBUTTONUP,
	MSG_ONBUTTONPRESS,
	MSG_ONRBUTTONPRESS,
	MSG_ONROLLOVER,
	MSG_ONROLLOFF,
	MSG_ONCHECK,
	MSG_ONUNCHECK,
	MSG_ONUNCHECKED,
	MSG_ONFORCECHECK,
	MSG_ONFORCEUNCHECK,
	MSG_ONCHECKMIDSTATE,
	MSG_ONLBUTTONDOWNCHECKED,
	MSG_ONLBUTTONUPCHECKED,
	MSG_ONROLLOVERCHECKED,
	MSG_ONROLLOFFCHECKED,
	MSG_ONLBUTTONDOWNMIDSTATE,
	MSG_ONLBUTTONUPMIDSTATE,
	MSG_ONROLLOVERMIDSTATE,
	MSG_ONROLLOFFMIDSTATE,
	MSG_ONGLOBALLBUTTONUP,
	MSG_ONGLOBALLBUTTONUPOFF,
	MSG_ONGLOBALLBUTTONDOWN,
	MSG_ONGLOBALRBUTTONUP,
	MSG_ONGLOBALRBUTTONUPOFF,
	MSG_ONGLOBALRBUTTONDOWN,
	MSG_ONGLOBALMBUTTONUP,
	MSG_ONGLOBALMBUTTONDOWN,
	MSG_ONKEYDOWN,
	MSG_ONKEYUP,
	MSG_ONKEYPRESS,
	MSG_CHAR,
	MSG_ONITEMACTIVATE,
	MSG_ONITEMDEACTIVATE,
	MSG_DEACTIVATE_SWITCH,
	MSG_ONDEACTIVATEITEMS,
	MSG_ONITEMPLACE,
	MSG_ONSTATECHANGE,
	MSG_ONACTIVATEMENU,
	MSG_ONMENUSELECT,
	MSG_CALCULATESLIDERSIZE,
	MSG_INCREMENT_SLIDER,
	MSG_DECREMENT_SLIDER,
	MSG_ONLDOUBLECLICK,
	MSG_ONRDOUBLECLICK,
	MSG_ONMDOUBLECLICK,
	MSG_GLOBALLDOUBLECLICK,
	MSG_GLOBALRDOUBLECLICK,
	MSG_GLOBALMDOUBLECLICK,
	MSG_ONWHEELUP,
	MSG_ONWHEELDOWN,
	MSG_ONEDITSELECT,
	MSG_ONEDITESCAPE,
	MSG_ONEDITHASFOCUS,
	MSG_ONEDITLOSTFOCUS,
	MSG_ONEDITDELETE,
	MSG_ONEDITTAB,
	MSG_ONEDITARROWUP,
	MSG_ONEDITARROWDOWN,
	MSG_ONEDITPASTEERROR,
	MSG_ONSLIDERLOSTFOCUS,
	MSG_ONCREATED,
	MSG_ONDESTROYED,
	MSG_ONSHOW,
	MSG_ONHIDE,
	MSG_ONFADEOUT,
	MSG_ONSTARTANIM,
	MSG_ONANIMCOMPLETE,
	MSG_ACTIVATECURSOR,
	MSG_ONDRAG,
	MSG_ONREMOVEITEM,
	MSG_ONEXIT,
	MSG_ONCOMBOEXPAND,
	MSG_ONEXPENDED,
	MSG_ONCOLLAPSED,
	MSG_ONSELECT,
	MSG_ONKEYSELECT,
	MSG_ONCONTEXT,
	MSG_ONENTER,
	MSG_ONESCAPE,
	MSG_ONCHANGE,
	MSG_ONCLICKDELAY,
	MSG_ONRESETCLICKDELAY,
	MSG_DISABLE,
	MSG_ENABLE,
	MSG_ONELEMENTROLLOVER,
	MSG_ONELEMENTROLLOFF,
	MSG_ONLISTENERMOVE,
	MSG_ONINSERTITEM,
	MSG_ONBEGINDRAG,
	MSG_ONENDDRAG,
	MSG_ONSWITCHSUCCESS,
};

enum eUIWindow {

};

enum eUsage {

};

enum eVoice {

};

enum eVoiceSound {
	VS_INVALID,
	VS_ENEMY_SPOTTED,
};

enum eWeapon {

};

enum eWeaponPreference {
    WP_UNKNOWN_01,
    WP_UNKNOWN_02,
    WP_MELEE,
    WP_RANGED,
    WP_MAGIC,
};

enum eWorld {

};

enum eWorldEvent {
	WE_INVALID,
	WE_UNKNOWN,
	WE_CONSTRUCTED,
	WE_DESTRUCTED,
	WE_JOB_DESTRUCTED,
	WE_ENTERED_WORLD,
	WE_LEFT_WORLD,
	WE_FRUSTUM_MEMBERSHIP_CHANGED,
	WE_FRUSTUM_ACTIVE_STATE_CHANGED,
	WE_EXPIRED_AUTO,
	WE_EXPIRED_FORCED,
	WE_PRE_SAVE_GAME,
	WE_POST_SAVE_GAME,
	WE_POST_RESTORE_GAME,
	WE_SAVE_MAP,
	WE_TERRAIN_TRANSITION_DONE,
	WE_WORLD_STATE_TRANSITION_DONE,
	WE_CAMERA_COMMAND_DONE,
	WE_PLAYER_CHANGED,
	WE_PLAYER_DATA_CHANGED,
	WE_SCIDBITS_CHANGED,
	WE_LIGHT_REGISTERED,
	WE_MP_MACHINE_CONNECTED,
	WE_MP_MACHINE_DISCONNECTED,
	WE_MP_FAILED_CONNECT,
	WE_MP_SESSION_CHANGED,
	WE_MP_SESSION_TERMINATED,
	WE_MP_SESSION_ADDED,
	WE_MP_SESSION_CONNECTED,
	WE_MP_PLAYER_CREATED,
	WE_MP_PLAYER_DESTROYED,
	WE_MP_PLAYER_READY,
	WE_MP_PLAYER_NOT_READY,
	WE_MP_PLAYER_WORLD_STATE_CHANGED,
	WE_MP_PLAYER_SET_CHARACTER_LEVEL,
	WE_MP_PLAYER_PARTY_CHANGED,
	WE_MP_SET_MAP,
	WE_MP_SET_MAP_WORLD,
	WE_MP_SET_GAME_TYPE,
	WE_MP_TERRAIN_FULLY_LOADED,
	WE_MP_TEAM_UPDATE,
	WE_MP_TEAM_INVITE_PLAYER,
	WE_MP_TEAM_CANCEL_INVITE,
	WE_MP_TEAM_PLAYER_JOINED,
	WE_MP_TEAM_PAYER_LEFT,
	WE_MP_PVP_UPDATE,
	WE_SELECTED,
	WE_DESELECTED,
	WE_FOCUSED,
	WE_UNFOCUSED,
	WE_HOTGROUP,
	WE_UNHOTGROUP,
	WE_MOUSEHOVER,
	WE_UNMOUSEHOVER,
	WE_COLLIDED,
	WE_GLANCED,
	WE_DAMAGED,
	WE_DROPPED,
	WE_EQUIPPED,
	WE_EXPLODED,
	WE_GOT,
	WE_KILLED,
	WE_LEVELED_UP,
	WE_LOST_CONSCIOUSNESS,
	WE_PICKED_UP,
	WE_REQ_ACTIVATE,
	WE_REQ_CAST,
	WE_REQ_CAST_CHARGE,
	WE_REQ_DEACTIVATE,
	WE_REQ_DELETE,
	WE_REQ_DIE,
	WE_REQ_LIVE,
	WE_REQ_TALK_BEGIN,
	WE_REQ_TALK_END,
	WE_REQ_USE,
	WE_RESURRECTED,
	WE_SPELL_COLLISION,
	WE_START_SIMULATING,
	WE_TRIGGER_ACTIVATE,
	WE_TRIGGER_DEACTIVATE,
	WE_UNEQUIPPED,
	WE_WEAPON_LAUNCHED,
	WE_MCP_CHORE_CHANGING,
	WE_MCP_FACING_LOCKEDON,
	WE_MCP_FACING_UNLOCKED,
	WE_MCP_INVALIDATED,
	WE_MCP_SECTION_COMPLETE_WARNING,
	WE_MCP_SECTION_COMPLETED,
	WE_MCP_NODE_BLOCKED,
	WE_MCP_DEPENDANCY_CREATED,
	WE_MCP_DEPENDANCY_REMOVED,
	WE_MCP_DEPENDANCY_BROKEN,
	WE_MCP_MUTUAL_DEPENDANCY,
	WE_ANIM_DONE,
	WE_ANIM_WEAPON_FIRE,
	WE_ANIM_WEAPON_SWUNG,
	WE_ANIM_SFX,
	WE_ANIM_OTHER,
	WE_ANIM_STEP_LEFT,
	WE_ANIM_STEP_RIGHT,
	WE_ANIM_ATTACH_AMMO,
	WE_ANIM_ATTACK_STARTED,
	WE_ANIM_DIE,
	WE_AI_ACTIVATE,
	WE_AI_DEACTIVATE,
	WE_ALERT_ENEMY_SPOTTED,
	WE_ALERT_PROJECTILE_NEAR_MISSED,
	WE_ALERT_ANGRY_AT_TARGET,
	WE_ATTACKED_MELEE,
	WE_ATTACKED_RANGED,
	WE_ATTACKED_MAGIC,
	WE_ATTACKED_POWER,
	WE_ENEMY_ENTERED_INNER_COMFORT_ZONE,
	WE_ENEMY_ENTERED_OUTER_COMFORT_ZONE,
	WE_ENEMY_SPOTTED,
	WE_ENGAGED_FLED,
	WE_ENGAGED_FLED_LIMITED,
	WE_ENGAGED_HIT_KILLED,
	WE_ENGAGED_HIT_LIVED,
	WE_ENGAGED_INVALID,
	WE_ENGAGED_KILLED,
	WE_ENGAGED_LOST,
	WE_ENGAGED_LOST_CONSCIOUSNESS,
	WE_ENGAGED_MISSED,
	WE_FRIEND_ENTERED_INNER_COMFORT_ZONE,
	WE_FRIEND_ENTERED_OUTER_COMFORT_ZONE,
	WE_FRIEND_SPOTTED,
	WE_GAINED_CONSCIOUSNESS,
	WE_JOB_FINISHED,
	WE_JOB_ACTIVATE,
	WE_JOB_DEACTIVATE,
	WE_JOB_TIMER_DONE,
	WE_LIFE_RATIO_REACHED_HIGH,
	WE_LIFE_RATIO_REACHED_LOW,
	WE_MANA_RATIO_REACHED_HIGH,
	WE_MANA_RATIO_REACHED_LOW,
	WE_MIND_ACTION_Q_EMPTIED,
	WE_MIND_PROCESSING_NEW_JOB,
	WE_REQ_JOB_END,
	WE_REQ_SENSOR_FLUSH,
	WE_MEMBER_ADDED,
	WE_HIDDEN,
	WE_TARGET_COLLIDED,
	WE_EFFECT_SYNC_END,
	WE_FLICKFX_SYNC_END,
	WE_FLICK_SYNC_END,
	WE_SPELL_EXPIRATION_TIMER_RESET,
	WE_SPELL_SYNC_BEGIN,
	WE_SPELL_SYNC_END,
	WE_SPELL_SYNC_MID,
	WE_WEAPON_DAMAGED,
	WE_GO_TIMER_DONE,
	WE_MP_SESSION_CREATED,
	// General custom messages.
	WE_USER_DAMAGE_RELAY,
	WE_USER_OBJECT_RELAY,
	WE_USER_OBJECT_ACTIVATE,
	WE_USER_OBJECT_DEACTIVATE,
	// Tree boss custom messages.
	WE_USER_QUERY_TREE_SHIELD_HP,
	WE_USER_REPORT_TREE_SHIELD_HP,
	WE_USER_MONSTER_LANDED,
	WE_USER_TREE_SHOOT,
	WE_USER_TREE_STOMP,
	WE_USER_TREE_ABSORBED,
	WE_USER_TREE_BUILDSHIELD,
	WE_USER_TREE_INTERRUPTED,
	WE_USER_TREE_SHOOT_HIT,
	WE_USER_TREE_ACTION_ENDED,
	WE_USER_TREE_REGENERATE_ENDED,
	WE_USER_TREE_HIDE_ENDED,
	WE_USER_TREE_INTERRUPTED_ENDED,
	WE_USER_TREE_MELEE_ENDED,
	WE_USER_TREE_MELEE_TELEGRAPH_ENDED,
	WE_USER_TREE_RANGE_ENDED,
	WE_USER_TREE_RANGE_TELEGRAPH_ENDED,
	WE_USER_TREE_HATCHLING_GENERATED,
	WE_USER_TREE_HATCHLING_DIED,
	WE_USER_TREE_HATCHLING_INIT,
	WE_USER_TREE_MAKE_SHIELD_VISIBLE,
	WE_USER_TREE_FRAG_COCOON,
	WE_USER_TREE_DAMAGE_RELAY,
	// Snake boss custom messages.
	WE_USER_SNAKE_BREATH,
	WE_USER_SNAKE_TRIPLE_EFFECT,
	// Dragon boss custom messages.
	WE_USER_DRAGON_NIS_BEGIN,
	WE_USER_DRAGON_ATTACK,
	WE_USER_DRAGON_ATTACK_AIR,
	WE_USER_DRAGON_ATTACK_DONE,
	WE_USER_DRAGON_BALLISTA_FIRE,
	WE_USER_DRAGON_BALLISTA_MOVE_LEFT,
	WE_USER_DRAGON_BALLISTA_MOVE_RIGHT,
	WE_USER_DRAGON_FIRE_STARTED,
	WE_USER_DRAGON_FIRE_OUT,
	// Dark Mage boss custom messages.
	WE_USER_DARK_MAGE_ACTION_FINISHED,
	WE_USER_DARK_MAGE_SHIELD_ON,
	WE_USER_DARK_MAGE_SHIELD_OFF,
	WE_USER_DARK_MAGE_INIT_SHARD,
	WE_USER_DARK_MAGE_SHARD_DIED,
	WE_USER_DARK_MAGE_UBER_HIT,
	WE_USER_DARK_MAGE_START_UBER,
	WE_USER_DARK_MAGE_START_STUN,
	WE_USER_DARK_MAGE_SHIELD_MOVE,
	WE_USER_DARK_MAGE_ELEMENTAL,
	WE_USER_DARK_MAGE_DIED,
	// Triple Dark Mage custom messages.
	WE_USER_DARK_MAGE_REQUEST_DOUBLE_ATTACK,
	WE_USER_DARK_MAGE_DOUBLE_REQUEST_MASTER,
	WE_USER_DARK_MAGE_CONFIRM_DOUBLE_ATTACK,
	WE_USER_DARK_MAGE_START_DOUBLE,
	WE_USER_DARK_MAGE_FRIEND1_DIED,
	WE_USER_DARK_MAGE_FRIEND2_DIED,
	WE_USER_DARK_MAGE_JOIN_SUMMON,
	WE_USER_DARK_MAGE_LEFT_SUMMON,
	WE_USER_DARK_MAGE_SUMMON_OVER,
	WE_USER_DARK_MAGE_REQUEST_SUMMON,
	WE_USER_DARK_MAGE_REQUEST_UBER,
	WE_USER_DARK_MAGE_JOIN_UBER,
	WE_USER_DARK_MAGE_UBER_INTERRUPTED,
	WE_USER_DARK_MAGE_UBER_BUSY,
	WE_USER_DARK_MAGE_UBER_DONE,
	WE_USER_DARK_MAGE_SUMMON_CHECK_DISTANCE,
	// ArchMage boss custom messages.
	WE_USER_ARCHMAGE_ACTION_FINISHED,
	WE_USER_ARCHMAGE_ACTUATOR_SHIELD_ACTIVE,
	WE_USER_ARCHMAGE_ACTUATOR_SHIELD_INACTIVE,
	WE_USER_ARCHMAGE_ACTUATOR_SHIELD_KILLED,
	WE_USER_ARCHMAGE_PROJECTILE_COLLIDE,
	// Valdis boss custom messages.
	WE_USER_VALDIS_SPLIT_STARTED,
	WE_USER_VALDIS_SPLIT_FINISHED,
	WE_USER_VALDIS_SPLIT_INTERRUPTED,
	WE_USER_VALDIS_ROCK_HAZARD,
	WE_USER_VALDIS_BEAM_COLLISION,
	WE_USER_VALDIS_TELEPORT,
	WE_USER_VALDIS_ALTAR_FORCE_STAGE_1,
	WE_USER_VALDIS_NIS_ANIM_START,
	// Mark of the Prisoner custom messages.
	WE_USER_START_PRISONER,
	WE_USER_STOP_PRISONER,
	WE_USER_HIT_PRISONER,
	// Light ray puzzle custom messages.
	WE_USER_LP_REFLECTING,
	WE_USER_LP_REFLECTED,
	WE_USER_LP_REFRESH,
	WE_USER_LP_REFRESH_END,
	WE_USER_LP_RESET,
	// Effect flipper custom message.
	WE_USER_FLIP_EFFECT,
	// Tutorial custom messages.
	WE_USER_POWER_BRUTAL_ATTACK,
	WE_USER_NPC_USE_POWER,
	// Generator Pcontent Message for NPC Actors.
	WE_USER_GENERATE_PCONTENT,
	// For the NIS with the commander at the castle.
	WE_USER_COMMANDER_KNOCKBACK,
	// A3 mines.
	WE_USER_CART_ARRIVED,
	// A3 Kalrathian Nexus Quest Staff.
	WE_USER_NEXUS_FIRE_ON,
	WE_USER_NEXUS_COLD_ON,
	WE_USER_NEXUS_EARTH_ON,
	// Used by damage_tick_until_message.flick/ damage hazard accumulator.
	WE_USER_START_DAMAGE,
	WE_USER_STOP_DAMAGE,
	// Used by monster and NPC brains.
	WE_USER_ENABLE_MIND,
	WE_USER_DISABLE_MIND,
	// Messages used by the indicate emitter to switch between different overhead icons.
	WE_USER_INDICATE_EMITTER_SWITCH,
	WE_USER_INDICATE_EMITTER_ON,
	WE_USER_INDICATE_EMITTER_OFF,
	WE_USER_INDICATE_EMITTER_INFO,
	WE_USER_INDICATE_EMITTER_TASK_ACTIVE,
	// Door.
	WE_USER_SECOND_DOOR,
	// Semi-generic
	WE_USER_EFFECT_START,
	// Message sent when the reveal job is complete (used by revealing mini-bosses to show mini-boss effect).
	WE_USER_REVEAL,
	// Used to let the "mark" spells know when an arrow has collided with a target.
	WE_USER_MARK_TARGET,
	WE_USER_DEACTIVATE_MARKS,
	// Used by cmd_change_property_owner.skrit.
	WE_USER_SET_STATE1,
	WE_USER_SET_STATE2,
	// Flame effigy custom message.
	WE_USER_FLAMEON,
	WE_USER_FLAME_EFFIGY_FIRE,
	// General custom messages.
};

enum eWorldState {
	WS_INVALID,
	WS_ANY,
	WS_INIT,
	WS_INTRO,
	WS_LOGO,
	WS_MAIN_MENU,
	WS_PRELOAD_INTRO,
	WS_LOAD_MAP,
	WS_LOADING_MAP,
	WS_LOADED_MAP,
	WS_LOADED_INTRO,
	WS_WAIT_FOR_BEGIN,
	WS_LOADING_SAVE_GAME,
	WS_CREDITS,
	WS_OPTIONS,
	WS_DEINIT,
	WS_RELOADING,
	WS_GAME_ENDED,
	WS_INGAME_MOVIE,
	WS_TELEPORT,
	WS_NIS,
	WS_SP_MAIN_MENU,
	WS_SP_INGAME_MENU,
	WS_SP_CHARACTER_SELECT,
	WS_SP_MAP_SELECT,
	WS_SP_DIFFICULTY_SELECT,
	WS_SP_VICTORY_SCREEN,
	WS_SP_LOAD_GAME_SCREEN,
	WS_SP_SAVE_GAME_SCREEN,
	WS_SP_INGAME,
	WS_SP_DEFEAT,
	WS_SP_VICTORY,
	WS_SP_OUTRO,
	WS_MP_PROVIDER_SELECT,
	WS_MP_INTERNET_GAME,
	WS_MP_LAN_GAME,
	WS_MP_MATCH_MAKER,
	WS_MP_STAGING_AREA_SERVER,
	WS_MP_STAGING_AREA_CLIENT,
	WS_MP_CHARACTER_SELECT,
	WS_MP_MAP_SELECT,
	WS_MP_SAVE_GAME_SCREEN,
	WS_MP_INGAME,
	WS_MP_INGAME_JIP,
	WS_MP_SESSION_LOST,
};

enum JUSTIFICATION {
	JUSTIFY_LEFT,
	JUSTIFY_RIGHT,
	JUSTIFY_CENTER,
} typedef eJustification;

enum UI_ACTION {
	ACTION_SETRECT,
	ACTION_SETNORMALIZEDRECT,
	ACTION_SETVISIBLE,
	ACTION_SHOWGROUP,
	ACTION_LOADTEXTURE,
	ACTION_LOADSTRETCHTEXTURES,
	ACTION_SETUVCOORDS,
	ACTION_SENDMESSAGE,
	ACTION_PARENTMESSAGE,
	ACTION_SETALPHA,
	ACTION_ADDELEMENT,
	ACTION_REMOVEELEMENT,
	ACTION_NOTIFY,
	ACTION_SETHOTSPOT,
	ACTION_SETTEXT,
	ACTION_SETGROUP,
	ACTION_SETELEMENTHEIGHT,
	ACTION_SETNUMSTATES,
	ACTION_SETSTATE,
	ACTION_SHOWMENU,
	ACTION_ACTIVATEMENU,
	ACTION_ACTIVATEITEM,
	ACTION_SETCOLOR,
	ACTION_PLAYSOUND,
	ACTION_KEYLISTEN,
	ACTION_KEYPRESS,
	ACTION_RECTANIMATION,
	ACTION_ALPHAANIMATION,
	ACTION_FLASHANIMATION,
	ACTION_STOPANIMATION,
	ACTION_CLOCKANIMATION,
	ACTION_SETSTATUS,
	ACTION_LOADANIMATEDTEXTURE,
	ACTION_CONSUMEINPUT,
	ACTION_EDITSELECT,
	ACTION_SHIFT_X,
	ACTION_SHIFT_Y,
	ACTION_SETROLLOVERHELP,
	ACTION_VERTEXCOLOR,
	ACTION_COMMAND,
	ACTION_CALL,
	ACTION_SETSLIDERBUTTON,
	ACTION_LOADGRIDIMAGE,
	ACTION_NONE,
} typedef eUIAction;

enum UI_CONTROL_TYPE {
	UI_TYPE_WINDOW,
	UI_TYPE_BUTTON,
	UI_TYPE_CHECKBOX,
	UI_TYPE_SLIDER,
	UI_TYPE_LISTBOX,
	UI_TYPE_RADIO_BUTTON,
	UI_TYPE_BUTTON_MULTISTAGE,
	UI_TYPE_TEXT,
	UI_TYPE_CURSOR,
	UI_TYPE_DOCKBAR,
	UI_TYPE_GRIDBOX,
	UI_TYPE_POPUPMENU,
	UI_TYPE_ITEM,
	UI_TYPE_ITEMSLOT,
	UI_TYPE_INFOSLOT,
	UI_TYPE_STATUS_BAR,
	UI_TYPE_EDIT_BOX,
	UI_TYPE_COMBO_BOX,
	UI_TYPE_LISTENER,
	UI_TYPE_LISTREPORT,
	UI_TYPE_CHAT_BOX,
	UI_TYPE_TEXT_BOX,
	UI_TYPE_DIALOG_BOX,
	UI_TYPE_TAB,
	UI_TYPE_LINE,
	UI_TYPE_OBJECT_VIEW,
	UI_TYPE_TREECTRL,
	UI_TYPE_CONTAINER,
} typedef eUIControlType;

enum UI_INPUT_TYPE {
	TYPE_INPUT_NONE,
	TYPE_INPUT_ALL,
	TYPE_INPUT_MOUSE,
	TYPE_INPUT_KEY,
} typedef eUIInputType;

enum eUsageContextFlags : uint {
    UC_LIFE_GIVING  = EnumFlag(1),
    UC_LIFE_GETTING = EnumFlag(2),
    UC_MANA_GIVING  = EnumFlag(3),
    UC_MANA_GETTING = EnumFlag(4),
    UC_REANIMATING  = EnumFlag(5),
    UC_PASSIVE      = EnumFlag(6),
    UC_AGGRESSIVE   = EnumFlag(7),
    UC_OFFENSIVE    = EnumFlag(8),
    UC_DEFENSIVE    = EnumFlag(9),
};

$Function(0x00940991, ToString, const char*, eAggroType value);
$Function(0x007aaca0, ToString, const char*, eAlignment value);
$Function(0x00931ae4, ToString, const char*, eAlteration value);
$Function(0x0083c50c, ToString, const char*, eDifficulty value);
$Function(0x007a0150, ToString, const char*, eDockbarType value);
$Function(0x007adc70, ToString, const char*, eEdgeType value);
$Function(0x0088732b, ToString, const char*, eEntryType value);
$Function(0x006d0e20, ToString, const char*, eFadeType value);
$Function(0x00582aca, ToString, const char*, eGamespyEvent value);
$Function(0x0095fcfe, ToString, const char*, eGoBitType value);
$Function(0x007ec9f5, ToString, const char*, eInventoryLocation value);
$Function(0x009409fd, ToString, const char*, eJobAbstractType value);
$Function(0x009409d6, ToString, const char*, eJobAttribute value);
$Function(0x0093cbfc, ToString, const char*, eJobResult value);
$Function(0x00760250, ToString, const char*, eJustification value);
$Function(0x007ec7a1, ToString, const char*, eLifeState value);
$Function(0x0091cdf2, ToString, const char*, eMoodRoomType value);
$Function(0x007ec877, ToString, const char*, ePContentType value);
$Function(0x00714eb0, ToString, const char*, ePixelBlend value);
$Function(0x006b7720, ToString, const char*, ePosHint value);
$Function(0x007ec7dd, ToString, const char*, eQuestState value);
$Function(0x00714ef0, ToString, const char*, eRibbonAlign value);
$Function(0x008785c1, ToString, const char*, eStandingOrders value);
$Function(0x00714e70, ToString, const char*, eTextureOp value);
$Function(0x0088e37f, ToString, const char*, eTuningGridDoor value);
$Function(0x007add10, ToString, const char*, eUIAction value);
$Function(0x007adbd0, ToString, const char*, eUIControlType value);
$Function(0x007adcd0, ToString, const char*, eUIInputType value);
$Function(0x007add70, ToString, const char*, eUIMessage value);
$Function(0x00848244, ToString, const char*, eWorldEvent value);
$Function(0x007d513c, ToString, const char*, eWorldState value);

FEX const char* ToString(eAction value);
FEX const char* ToString(eActionOrigin value);
FEX const char* ToString(eActive value);
FEX const char* ToString(eActiveSkillDelivery value);
FEX const char* ToString(eActor value);
FEX const char* ToString(eActorAlignment value);
FEX const char* ToString(eAggro value);
FEX const char* ToString(eAnim value);
FEX const char* ToString(eAnimChore value);
FEX const char* ToString(eAnimEvent value);
FEX const char* ToString(eAnimStance value);
FEX const char* ToString(eAttack value);
FEX const char* ToString(eAttackClass value);
FEX const char* ToString(eAxis value);
FEX const char* ToString(eAxisHint value);
FEX const char* ToString(eCamera value);
FEX const char* ToString(eCameraInterp value);
FEX const char* ToString(eCameraOrder value);
FEX const char* ToString(eCombat value);
FEX const char* ToString(eCreate value);
FEX const char* ToString(eDamage value);
FEX const char* ToString(eDamageType value);
FEX const char* ToString(eDebug value);
FEX const char* ToString(eDebugHudOptions value);
FEX const char* ToString(eDrop value);
FEX const char* ToString(eEntry value);
FEX const char* ToString(eEquip value);
FEX const char* ToString(eEquipSlot value); // Defined in EquipSlot.cpp.
FEX const char* ToString(eFade value);
FEX const char* ToString(eFocus value);
FEX const char* ToString(eGame value);
FEX const char* ToString(eGamespy value);
FEX const char* ToString(eGo value);
FEX const char* ToString(eInventory value);
FEX const char* ToString(eItem value);
FEX const char* ToString(eItemSkillType value);
FEX const char* ToString(eJob value);
FEX const char* ToString(eLife value);
FEX const char* ToString(eLoot value);
FEX const char* ToString(eMagic value);
FEX const char* ToString(eMagicClass value);
FEX const char* ToString(eMini value);
FEX const char* ToString(eMood value);
FEX const char* ToString(eMiniGame value);
FEX const char* ToString(eMovement value);
FEX const char* ToString(ePClass value);
FEX const char* ToString(ePhysics value);
FEX const char* ToString(ePixel value);
FEX const char* ToString(ePlayer value);
FEX const char* ToString(ePlayerController value);
FEX const char* ToString(ePos value);
FEX const char* ToString(eQPlace value);
FEX const char* ToString(eQuery value);
FEX const char* ToString(eQueryTrait value);
FEX const char* ToString(eQuest value);
FEX const char* ToString(eQuickSlotSkill value);
FEX const char* ToString(eRibbon value);
FEX const char* ToString(eRoom value);
FEX const char* ToString(eStanding value);
FEX const char* ToString(eGameStat value);
FEX const char* ToString(eTarget value);
FEX const char* ToString(eTargetTypeFlags value);
FEX const char* ToString(eTexture value);
FEX const char* ToString(eTuning value);
FEX const char* ToString(eUIWindow value);
FEX const char* ToString(eUsage value);
FEX const char* ToString(eVoice value);
FEX const char* ToString(eVoiceSound value);
FEX const char* ToString(eWeapon value);
FEX const char* ToString(eWorld value);

$Function(0x0093bc00, ChoreFromString, eAnimChore, const char* value);
$Function(0x0092879f, CameraInterpFromString, eCameraInterp, const char* value);
$Function(0x00928f8a, CameraOrderFromString, eCameraOrder, const char* value);
$Function(0x0084826b, WorldEventFromString, eWorldEvent, const char* value); // Exported as: FromString

$Function(0x009409a3, MakeInt, int, eAggroType aggroType);
$Function(0x0093bc26, MakeInt, int, eAnimChore animChore);
$Function(0x00940b92, MakeInt, int, eCombatOrders combatOrders);
$Function(0x00940b5b, MakeInt, int, eMovementOrders movementOrders);
